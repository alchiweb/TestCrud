@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "Créer @Model.ModelMetadata.ModelType.Name";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
    @:var newLocalId = Guid.NewGuid();
    @:var modelTypeName = ViewData.ModelMetadata.ModelType.Name;
    @:var hideLayout = ViewBag.Layout is bool bLayout && bLayout == false;
    @:string errorMessage = ViewBag.ErrorMessage;
    @:if (hideLayout)
    @:{
        @:Layout = null;
    @:}
    @:else
    @:{
        @:@@section CssStyle{
            @:@@{
                @://await Html.RenderPartialAsync("_SlickGridStylePartial");        // pour la grille
            @:}
        @:}

        @:@@section Scripts{
            @:@@{
                @://await Html.RenderPartialAsync("_SlickGridScriptsPartial");        // pour la grille
                @:await Html.RenderPartialAsync("_CrudScriptsPartial");             // pour les fenêtres de dialog du CRUD
                @:await Html.RenderPartialAsync("_SpaEntitySignalScriptsPartial");  // pour les mises à jour instantanées de la page
                @:<script type='text/javascript'>
                @:    $(function () {
                @:        InitCrud('@@(ViewContext.RouteData.Values["controller"])');
                @:    });
                @:</script>
            @:}
        @:}
    @:}
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:@@if (!hideLayout)
@:{
    @:@@Html.Raw($"<h1>{ViewData["Title"]}</h1><div class='card'><div class='card-header'><h3 class='card-title'></h3></div><div class='card-body'><div class='flex-layout s-Panel' id='crudPrincipal'>");
    @:}
    @:<div id="@@(newLocalId)_DialogContent" class="s-DialogContent ui-tabs ui-corner-all ui-widget ui-widget-content">
    @:<ul role="tablist" class="ui-tabs-nav ui-corner-all ui-helper-reset ui-helper-clearfix ui-widget-header">
        @:<li role="tab" tabindex="0" class="ui-tabs-tab ui-corner-top ui-state-default ui-tab ui-tabs-active ui-state-active" aria-controls="@@(newLocalId)_Tab1" aria-labelledby="@@(newLocalId)_Principal" aria-selected="true" aria-expanded="true"><a href="#" role="presentation" tabindex="-1" class="ui-tabs-anchor" id="@@(newLocalId)_Principal"><span>Principal</span></a></li>
    @:</ul>
    @:<div id="@@(newLocalId)_Tab1" class="tab-pane ui-tabs-panel ui-corner-bottom ui-widget-content" aria-labelledby="@@(newLocalId)_Principal" role="tabpanel" aria-hidden="false" style="">
    @:<div class="s-Form">
    @:<form asp-action="Create" asp-route-layout="@@(!hideLayout)" data-ajax="@@(hideLayout.ToString().ToLower())" data-ajax-success="AjaxFormSuccess" data-ajax-failure="AjaxFormFailure" style="width:100%">
    @:<div class="ajax-error-text text-danger" style="@@(String.IsNullOrWhiteSpace(errorMessage) ? "display:none" : "")">@@errorMessage</div>

    @:<div id="@@(newLocalId)_Tab1_Toolbar" class="s-DialogToolbar s-Toolbar clearfix">
    @:<div class="tool-buttons">
    @:<div class="buttons-outer">
    @:<div class="buttons-inner">
    @:<div class="tool-button save-and-close-button">
    @:<div class="button-outer"><span class="button-inner">Sauver</span></div>
@:</div>
@:</div>
@:</div>
@:</div>
@:</div>
    @:<div class="fieldset" data-entity="@@modelTypeName" data-action="Create">
    @:<div class="s-PropertyGrid">
    @:<div class="category-links">
    @:<a class="category-link" tabindex="-1" href="#">Infos principales</a>
    @:<div class="clear"></div>
@:</div>

    @:<div class="categories">
    @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @:<div class="category">
    @:<div class="category-title">
    @:<a class="category-anchor" name="@@(newLocalId)_Tab1_Cat1">Infos principales</a>
@:</div>
        Dictionary<string, INavigationMetadata> foreignKeys = ((IModelMetadata)Model.ModelMetadata).Navigations.SelectMany(p => p.ForeignKeyPropertyNames,
            (nav, foreignKey) => new { nav, foreignKey }).ToDictionary(x => x.foreignKey, x => x.nav);
        foreach (var property in Model.ModelMetadata.Properties)
        {
            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
            {
                if (property.IsForeignKey)
                {
            @:<div class="field">
                @:<label asp-for="@property.PropertyName" class="caption"></label>
                @if (foreignKeys.TryGetValue(property.PropertyName, out INavigationMetadata navigation))
                {
                @:<select asp-for="@property.PropertyName" class="select2" asp-items="ViewBag.@property.PropertyName" data-entity="@navigation.EntitySetName"><option value="">- Aucun -</option></select>
                @:<a asp-controller="@navigation.EntitySetName" asp-action="Edit" class="crud_indialog inplace-button inplace-create edit" data-entity="@navigation.EntitySetName" data-field="@property.PropertyName" data-row=""><b data="Edit"></b></a>
                @:<a asp-controller="@navigation.EntitySetName" asp-action="Create" class="crud_indialog inplace-button inplace-create create" data-entity="@navigation.EntitySetName" data-field="@property.PropertyName" data-row=""><b data="Create"></b></a>
                }
                else
                {
                @:<select asp-for="@property.PropertyName" class="select2" asp-items="ViewBag.@property.PropertyName"><option value="">- Aucun -</option></select>
                }
            @:</div>
                    continue;
                }

                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                if (isCheckbox)
                {
            @:<div class="field form-check">
                @:<label class="caption form-check-label">
                    @:<input class="editor form-check-input" asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                @:</label>
            @:</div>
                }
                else if (property.IsEnum && !property.IsEnumFlags)
                {
            @:<div class="field">
                @:<label asp-for="@property.PropertyName" class="caption"></label>
                @:<select asp-for="@property.PropertyName" class="editor"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else if (property.IsMultilineText)
                {
            @:<div class="field">
                @:<label asp-for="@property.PropertyName" class="caption"></label>
                @:<textarea asp-for="@property.PropertyName" class="editor"></textarea>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else
                {
            @:<div class="field">
                @:<label asp-for="@property.PropertyName" class="caption"></label>
                @:<input asp-for="@property.PropertyName" class="editor" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
            }
        }
        }
                            </div>
                        </div>
                    </div>
                    <div class="clear"></div>
                </div>
            </form>
        </div>
    </div>
</div>

@{
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
